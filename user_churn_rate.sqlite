-----------TASK 1---------------
--How many different segments do you see in the table?

SELECT DISTINCT segment
 FROM subscriptions;

-----------TASK 2---------------
--Determine the range of months of data provided. Which months will you be able to calculate churn for?

SELECT MIN(subscription_start),
    MAX(subscription_start),
    MIN(subscription_end),
    MAX(subscription_end)
FROM subscriptions;

-----------TASKS 3-8---------------
--Final goal: Calculate the churn rates for the two segments over the three month period. Which segment has a lower churn rate?

WITH months AS 
(SELECT 
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
  UNION
  SELECT '2017-02-01' as first_day,
  '2017-02-28' as last_day
  UNION
  SELECT '2017-03-01' as first_day,
  '2017-03-31' as last_day
), 
cross_join AS (SELECT *
FROM months
CROSS JOIN subscriptions),
status AS (SELECT 
  id, 
  first_day AS month,
  CASE WHEN segment=87 AND (subscription_start < first_day) AND (subscription_end > first_day OR subscription_end IS NULL)
    THEN 1
    ELSE 0
  END as is_active_87,
  CASE WHEN segment=30 AND (subscription_start < first_day) AND (subscription_end > first_day OR subscription_end IS NULL)
    THEN 1
    ELSE 0
  END as is_active_30,
  CASE 
    WHEN segment=87 AND (subscription_end BETWEEN first_day AND last_day )
    THEN 1
    ELSE 0
  END as is_canceled_87,
  CASE 
    WHEN segment=30 AND (subscription_end BETWEEN first_day AND last_day)
    THEN 1
    ELSE 0
  END as is_canceled_30
FROM cross_join),

status_aggregate AS (
SELECT month,
  SUM(is_active_87) as sum_active_87,
  SUM(is_active_30) as sum_active_30,
  SUM(is_canceled_87) as sum_canceled_87,
  SUM(is_canceled_30) as sum_canceled_30,
  (SUM(1.0 * is_canceled_87) / SUM(is_active_87)) as churn_rate_87,
  (SUM(1.0 * is_canceled_30) / SUM(is_active_30)) as churn_rate_30
FROM status
GROUP BY month)

SELECT * 
FROM status_aggregate;

-------------TASK 9--------------
--How would you modify this code to support a large number of segments?

WITH months AS 
(SELECT 
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
  UNION
  SELECT '2017-02-01' as first_day,
  '2017-02-28' as last_day
  UNION
  SELECT '2017-03-01' as first_day,
  '2017-03-31' as last_day
), 
cross_join AS (SELECT *
FROM months
CROSS JOIN subscriptions),

status AS (SELECT 
  id,
  segment,
  first_day AS month,
  CASE WHEN subscription_start < first_day AND (subscription_end > first_day OR subscription_end IS NULL)
    THEN 1
    ELSE 0
  END as is_active,
 CASE WHEN subscription_end BETWEEN first_day AND last_day 
    THEN 1
    ELSE 0
  END as is_canceled
FROM cross_join)

SELECT month, segment,
  SUM(is_active),
  SUM(is_canceled),
  (SUM(1.0 * is_canceled) / SUM(is_active)) as churn_rate_by_segment
FROM status
GROUP BY  month, segment;

